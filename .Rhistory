scattermat=chosen
} else {
scattermat=dplyr::select(chosen, all_of(metrics))
}
pm<-ggpairs(
scattermat,
upper=list(continuous='cor'),
lower=list(continuous=wrap('points', alpha=0.3)),
diag=list(continuous=my_fn)
)
pm=pm + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# path="G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/Figures"
# filename='full hydro.pdf'
# ggsave(filename = filename, plot=pm, device='pdf', path = path, width=5.5, height = 5.5, units = 'in')
pm
#### plot the cut SOW ensemble
chosen=cut_ensemble
if(ncol(chosen)==1){
chosen=data.frame(chosen, Index=1:nrow(chosen))
colnames(chosen)[1]=metrics
scattermat=chosen
} else {
scattermat=dplyr::select(chosen, all_of(metrics))
}
pm<-ggpairs(
scattermat,
upper=list(continuous='cor'),
lower=list(continuous=wrap('points', alpha=0.3)),
diag=list(continuous=my_fn)
)
pm=pm + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# path="G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/Figures"
# filename='full hydro.pdf'
# ggsave(filename = filename, plot=pm, device='pdf', path = path, width=5.5, height = 5.5, units = 'in')
pm
# function to add vertical line to indicate mean of each metric
my_fn <- function(data, mapping, ...){
meanX <- mean(eval_data_col(data, mapping$x), na.rm = TRUE)
text=as.character(round(meanX, digits=2))
#text=paste('mean=',round(meanX, digits=2))
p <- ggplot(data = data, mapping = mapping) +
geom_density(adjust=3, kernel="gaussian")+
geom_vline(xintercept = meanX,color='red',linetype='dashed' ) +
annotate('text', label=text,x=Inf, y=Inf, vjust=1, hjust=1, size=4, col='red')
p
}
#
#
# scatter.mat=list()
# for (i in 1: length(scatter.df)){
#
#   scatter.mat[[i]]=ggpairs(
#     scatter.df[[i]],
#     upper = list(continuous = "cor"),
#     lower =list(continuous=wrap('points', alpha=0.3)),
#     diag=list(continous=my_fn)
#   )
#   scatter.mat[[i]]=scatter.mat[[i]] + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# }
#
# sampleNames=1:length(subsample)
# for (i in 1: length(subsample)){
#
#   sampleNames[i]=subsample[[i]]$method
#
# }
#
# pdf_print=plot_grid(
#   ggmatrix_gtable(scatter.mat[[1]]),
#   ggmatrix_gtable(scatter.mat[[2]]),
#   ggmatrix_gtable(scatter.mat[[3]]),
#   nrow = 1, labels=sampleNames, label_size = 8, label_x = 0, label_y = 1,
#   hjust=c(-.05,0,-.5,-.5)
# )
#
# path="G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/Figures"
# filename='SOW ensembles scattermat.pdf'
#
# ggsave(filename = filename, plot=pdf_print, device='pdf', path = path, width=17, height = 5.5, units = 'in')
#
###### Plotting just one SOW set
chosen=uniform_cLHS$SOW
if(is.vector(chosen)){
chosen=data.frame(chosen, Index=1:length(chosen))
colnames(chosen)[1]=metrics
scattermat=chosen
} else {
scattermat=dplyr::select(chosen, all_of(metrics))
}
pm<-ggpairs(
scattermat,
upper=list(continuous='cor'),
lower=list(continuous=wrap('points', alpha=0.3)),
diag=list(continuous=my_fn)
)
pm=pm + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# path="G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/Figures"
# filename='cLHS N500.pdf'
# ggsave(filename = filename, plot=pm, device='pdf', path = path, width=5.5, height = 5.5, units = 'in')
#
# Plot the full hydrology dataset (ObsRes, PCNF, DPNF, GCM) for comparison
pm
###### Plotting just one SOW set
chosen=KenStoneSOW
if(is.vector(chosen)){
chosen=data.frame(chosen, Index=1:length(chosen))
colnames(chosen)[1]=metrics
scattermat=chosen
} else {
scattermat=dplyr::select(chosen, all_of(metrics))
}
pm<-ggpairs(
scattermat,
upper=list(continuous='cor'),
lower=list(continuous=wrap('points', alpha=0.3)),
diag=list(continuous=my_fn)
)
pm=pm + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# path="G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/Figures"
# filename='full hydro.pdf'
# ggsave(filename = filename, plot=pm, device='pdf', path = path, width=5.5, height = 5.5, units = 'in')
pm
#### plot the cut SOW ensemble
chosen=cut_ensemble
if(ncol(chosen)==1){
chosen=data.frame(chosen, Index=1:nrow(chosen))
colnames(chosen)[1]=metrics
scattermat=chosen
} else {
scattermat=dplyr::select(chosen, all_of(metrics))
}
pm<-ggpairs(
scattermat,
upper=list(continuous='cor'),
lower=list(continuous=wrap('points', alpha=0.3)),
diag=list(continuous=my_fn)
)
pm=pm + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# path="G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/Figures"
# filename='full hydro.pdf'
# ggsave(filename = filename, plot=pm, device='pdf', path = path, width=5.5, height = 5.5, units = 'in')
pm
library(dplyr)
library(GGally)
library(cowplot)
library(clhs)
library(rlist)
library(prospectr) # Kennard Stone
# load my modified version of cLHS to for a uniform cLHS implementations
source("G:/My Drive/CU Boulder/Phase 2 Uncertainty Characterization/R/Scripts/modified clhs.R")
environment(my_clhs) <- asNamespace('clhs') # setting environment of your function the same as the original package
assignInNamespace("clhs", my_clhs, ns = "clhs") # replacing my_clhs with clhs anywhere else clhs occurs in the package clhs. Should not affect my results, but just in case
######################################### Load cLHS 500 ###################################
temp=readRDS("G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/data/SOW/SOW ensemble 500_300_100.rds")
cLHS500=temp[[1]]$SOW
######################################### Subsampling from cLHS 500 ###################
# I previously created a 500 member ensemble, and the archive of 463 policies were tested in all of them. This first truncates the uncertainty range, informed from
# SD results with cLHS 500 and 300. Then, I sample 100 uniformly from the truncated range
### truncate range of uncertainty based on SD results in Phase IV report
# establish uncertainty truncation
#metrics=c("Driest2yrAVG", "Driest5yrAVG", "Driest8yrAVG", "Driest10yrAVG","Driest20yrAVG")
# discovered=c(8.48, 10.39, 11.3, 12.09, 13.41)
# metrics=c("Driest2yrAVG","Driest20yrAVG")
# discovered=c(8.48, 13.41)
# metrics=c("Driest5yrAVG","Driest20yrAVG")
# discovered=c(10.39, 13.41)
# metrics=c("Driest8yrAVG")
# discovered=11.3
lower=discovered -1
upper=discovered + .5
truncate=data.frame(lower, upper)
# truncate
cLHS500$ID=1:nrow(cLHS500)
for(i in 1:nrow(truncate)){
temp=which(cLHS500[[metrics[i]]] >= lower[i] & cLHS500[[metrics[i]]] <= upper[i])
if(i==1){
keep=temp
} else {
keep=temp[temp %in% keep]
}
}
cut_ensemble=cLHS500[keep,]
### uniform cLHS with 100 SOW, selected from truncated SOW ensemble
iter=1000
n=round(0.50*length(keep),-1)
set.seed(12)
uniform_cLHS=list()
cut_ensemble=dplyr::select(cut_ensemble, all_of(metrics))
obj=my_clhs(cut_ensemble, size=n, iter=iter, simple = F, weights = list(numeric=1, factor=1, correlation=0))
model=obj$index_samples
uniform_cLHS[['method']]='uniform cLHS N100'
uniform_cLHS[['model']]=model
uniform_cLHS[['SOW']]=cut_ensemble[model,]
### Kennard Stone
if(ncol(cut_ensemble)==1){
KSinput=data.frame(cut_ensemble, cut_ensemble)
}
KSkeep=kenStone(KSinput, k=n, metric = "euclid")$model
KenStoneSOW=cut_ensemble[KSkeep,]
######################################## Plotting ###############################
# subsample=SOW.ensemble.list
#
# scatter.df=list()
# for (i in 1:length(subsample)){
#   scatter.df[[i]]=dplyr::select(subsample[[i]]$SOW, Demand, Mead.PE, Powell.PE, mean, HighQ.AvgDur.hist, NonHighQ.AvgDur.hist)
#   # shorten HighQ and nonHighQ names for plotting
#   colnames(scatter.df[[i]])[which(colnames(scatter.df[[i]]) %in% c('HighQ.AvgDur.hist', 'NonHighQ.AvgDur.hist'))] = c('HighQ', 'nonHighQ')
# }
# function to add vertical line to indicate mean of each metric
my_fn <- function(data, mapping, ...){
meanX <- mean(eval_data_col(data, mapping$x), na.rm = TRUE)
text=as.character(round(meanX, digits=2))
#text=paste('mean=',round(meanX, digits=2))
p <- ggplot(data = data, mapping = mapping) +
geom_density(adjust=3, kernel="gaussian")+
geom_vline(xintercept = meanX,color='red',linetype='dashed' ) +
annotate('text', label=text,x=Inf, y=Inf, vjust=1, hjust=1, size=4, col='red')
p
}
#
#
# scatter.mat=list()
# for (i in 1: length(scatter.df)){
#
#   scatter.mat[[i]]=ggpairs(
#     scatter.df[[i]],
#     upper = list(continuous = "cor"),
#     lower =list(continuous=wrap('points', alpha=0.3)),
#     diag=list(continous=my_fn)
#   )
#   scatter.mat[[i]]=scatter.mat[[i]] + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# }
#
# sampleNames=1:length(subsample)
# for (i in 1: length(subsample)){
#
#   sampleNames[i]=subsample[[i]]$method
#
# }
#
# pdf_print=plot_grid(
#   ggmatrix_gtable(scatter.mat[[1]]),
#   ggmatrix_gtable(scatter.mat[[2]]),
#   ggmatrix_gtable(scatter.mat[[3]]),
#   nrow = 1, labels=sampleNames, label_size = 8, label_x = 0, label_y = 1,
#   hjust=c(-.05,0,-.5,-.5)
# )
#
# path="G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/Figures"
# filename='SOW ensembles scattermat.pdf'
#
# ggsave(filename = filename, plot=pdf_print, device='pdf', path = path, width=17, height = 5.5, units = 'in')
#
###### Plotting just one SOW set
chosen=uniform_cLHS$SOW
if(is.vector(chosen)){
chosen=data.frame(chosen, Index=1:length(chosen))
colnames(chosen)[1]=metrics
scattermat=chosen
} else {
scattermat=dplyr::select(chosen, all_of(metrics))
}
pm<-ggpairs(
scattermat,
upper=list(continuous='cor'),
lower=list(continuous=wrap('points', alpha=0.3)),
diag=list(continuous=my_fn)
)
pm=pm + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# path="G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/Figures"
# filename='cLHS N500.pdf'
# ggsave(filename = filename, plot=pm, device='pdf', path = path, width=5.5, height = 5.5, units = 'in')
#
# Plot the full hydrology dataset (ObsRes, PCNF, DPNF, GCM) for comparison
pm
###### Plotting just one SOW set
chosen=KenStoneSOW
if(is.vector(chosen)){
chosen=data.frame(chosen, Index=1:length(chosen))
colnames(chosen)[1]=metrics
scattermat=chosen
} else {
scattermat=dplyr::select(chosen, all_of(metrics))
}
pm<-ggpairs(
scattermat,
upper=list(continuous='cor'),
lower=list(continuous=wrap('points', alpha=0.3)),
diag=list(continuous=my_fn)
)
pm=pm + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# path="G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/Figures"
# filename='full hydro.pdf'
# ggsave(filename = filename, plot=pm, device='pdf', path = path, width=5.5, height = 5.5, units = 'in')
pm
#### plot the cut SOW ensemble
chosen=cut_ensemble
if(ncol(chosen)==1){
chosen=data.frame(chosen, Index=1:nrow(chosen))
colnames(chosen)[1]=metrics
scattermat=chosen
} else {
scattermat=dplyr::select(chosen, all_of(metrics))
}
pm<-ggpairs(
scattermat,
upper=list(continuous='cor'),
lower=list(continuous=wrap('points', alpha=0.3)),
diag=list(continuous=my_fn)
)
pm=pm + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# path="G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/Figures"
# filename='full hydro.pdf'
# ggsave(filename = filename, plot=pm, device='pdf', path = path, width=5.5, height = 5.5, units = 'in')
pm
library(dplyr)
library(GGally)
library(cowplot)
library(clhs)
library(rlist)
library(prospectr) # Kennard Stone
# load my modified version of cLHS to for a uniform cLHS implementations
source("G:/My Drive/CU Boulder/Phase 2 Uncertainty Characterization/R/Scripts/modified clhs.R")
environment(my_clhs) <- asNamespace('clhs') # setting environment of your function the same as the original package
assignInNamespace("clhs", my_clhs, ns = "clhs") # replacing my_clhs with clhs anywhere else clhs occurs in the package clhs. Should not affect my results, but just in case
######################################### Load cLHS 500 ###################################
temp=readRDS("G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/R/data/SOW/SOW ensemble 500_300_100.rds")
cLHS500=temp[[1]]$SOW
######################################### Subsampling from cLHS 500 ###################
# I previously created a 500 member ensemble, and the archive of 463 policies were tested in all of them. This first truncates the uncertainty range, informed from
# SD results with cLHS 500 and 300. Then, I sample 100 uniformly from the truncated range
### truncate range of uncertainty based on SD results in Phase IV report
# establish uncertainty truncation
#metrics=c("Driest2yrAVG", "Driest5yrAVG", "Driest8yrAVG", "Driest10yrAVG","Driest20yrAVG")
# discovered=c(8.48, 10.39, 11.3, 12.09, 13.41)
# metrics=c("Driest2yrAVG","Driest20yrAVG")
# discovered=c(8.48, 13.41)
# metrics=c("Driest5yrAVG","Driest20yrAVG")
# discovered=c(10.39, 13.41)
metrics=c("Driest8yrAVG")
discovered=11.3
lower=discovered -1
upper=discovered + .5
truncate=data.frame(lower, upper)
# truncate
cLHS500$ID=1:nrow(cLHS500)
for(i in 1:nrow(truncate)){
temp=which(cLHS500[[metrics[i]]] >= lower[i] & cLHS500[[metrics[i]]] <= upper[i])
if(i==1){
keep=temp
} else {
keep=temp[temp %in% keep]
}
}
cut_ensemble=cLHS500[keep,]
### uniform cLHS with 100 SOW, selected from truncated SOW ensemble
iter=1000
n=round(0.50*length(keep),-1)
set.seed(12)
uniform_cLHS=list()
cut_ensemble=dplyr::select(cut_ensemble, all_of(metrics))
obj=my_clhs(cut_ensemble, size=n, iter=iter, simple = F, weights = list(numeric=1, factor=1, correlation=0))
model=obj$index_samples
uniform_cLHS[['method']]='uniform cLHS N100'
uniform_cLHS[['model']]=model
uniform_cLHS[['SOW']]=cut_ensemble[model,]
### Kennard Stone
if(ncol(cut_ensemble)==1){
KSinput=data.frame(cut_ensemble, cut_ensemble)
}
KSkeep=kenStone(KSinput, k=n, metric = "euclid")$model
KenStoneSOW=cut_ensemble[KSkeep,]
######################################## Plotting ###############################
# subsample=SOW.ensemble.list
#
# scatter.df=list()
# for (i in 1:length(subsample)){
#   scatter.df[[i]]=dplyr::select(subsample[[i]]$SOW, Demand, Mead.PE, Powell.PE, mean, HighQ.AvgDur.hist, NonHighQ.AvgDur.hist)
#   # shorten HighQ and nonHighQ names for plotting
#   colnames(scatter.df[[i]])[which(colnames(scatter.df[[i]]) %in% c('HighQ.AvgDur.hist', 'NonHighQ.AvgDur.hist'))] = c('HighQ', 'nonHighQ')
# }
# function to add vertical line to indicate mean of each metric
my_fn <- function(data, mapping, ...){
meanX <- mean(eval_data_col(data, mapping$x), na.rm = TRUE)
text=as.character(round(meanX, digits=2))
#text=paste('mean=',round(meanX, digits=2))
p <- ggplot(data = data, mapping = mapping) +
geom_density(adjust=3, kernel="gaussian")+
geom_vline(xintercept = meanX,color='red',linetype='dashed' ) +
annotate('text', label=text,x=Inf, y=Inf, vjust=1, hjust=1, size=4, col='red')
p
}
#
#
# scatter.mat=list()
# for (i in 1: length(scatter.df)){
#
#   scatter.mat[[i]]=ggpairs(
#     scatter.df[[i]],
#     upper = list(continuous = "cor"),
#     lower =list(continuous=wrap('points', alpha=0.3)),
#     diag=list(continous=my_fn)
#   )
#   scatter.mat[[i]]=scatter.mat[[i]] + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# }
#
# sampleNames=1:length(subsample)
# for (i in 1: length(subsample)){
#
#   sampleNames[i]=subsample[[i]]$method
#
# }
#
# pdf_print=plot_grid(
#   ggmatrix_gtable(scatter.mat[[1]]),
#   ggmatrix_gtable(scatter.mat[[2]]),
#   ggmatrix_gtable(scatter.mat[[3]]),
#   nrow = 1, labels=sampleNames, label_size = 8, label_x = 0, label_y = 1,
#   hjust=c(-.05,0,-.5,-.5)
# )
#
# path="G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/Figures"
# filename='SOW ensembles scattermat.pdf'
#
# ggsave(filename = filename, plot=pdf_print, device='pdf', path = path, width=17, height = 5.5, units = 'in')
#
###### Plotting just one SOW set
chosen=uniform_cLHS$SOW
if(is.vector(chosen)){
chosen=data.frame(chosen, Index=1:length(chosen))
colnames(chosen)[1]=metrics
scattermat=chosen
} else {
scattermat=dplyr::select(chosen, all_of(metrics))
}
pm<-ggpairs(
scattermat,
upper=list(continuous='cor'),
lower=list(continuous=wrap('points', alpha=0.3)),
diag=list(continuous=my_fn)
)
pm=pm + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# path="G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/Figures"
# filename='cLHS N500.pdf'
# ggsave(filename = filename, plot=pm, device='pdf', path = path, width=5.5, height = 5.5, units = 'in')
#
# Plot the full hydrology dataset (ObsRes, PCNF, DPNF, GCM) for comparison
pm
###### Plotting just one SOW set
chosen=KenStoneSOW
if(is.vector(chosen)){
chosen=data.frame(chosen, Index=1:length(chosen))
colnames(chosen)[1]=metrics
scattermat=chosen
} else {
scattermat=dplyr::select(chosen, all_of(metrics))
}
pm<-ggpairs(
scattermat,
upper=list(continuous='cor'),
lower=list(continuous=wrap('points', alpha=0.3)),
diag=list(continuous=my_fn)
)
pm=pm + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# path="G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/Figures"
# filename='full hydro.pdf'
# ggsave(filename = filename, plot=pm, device='pdf', path = path, width=5.5, height = 5.5, units = 'in')
pm
#### plot the cut SOW ensemble
chosen=cut_ensemble
if(ncol(chosen)==1){
chosen=data.frame(chosen, Index=1:nrow(chosen))
colnames(chosen)[1]=metrics
scattermat=chosen
} else {
scattermat=dplyr::select(chosen, all_of(metrics))
}
pm<-ggpairs(
scattermat,
upper=list(continuous='cor'),
lower=list(continuous=wrap('points', alpha=0.3)),
diag=list(continuous=my_fn)
)
pm=pm + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# path="G:/My Drive/CU Boulder/Phase 3 Robustness Calculations/Figures"
# filename='full hydro.pdf'
# ggsave(filename = filename, plot=pm, device='pdf', path = path, width=5.5, height = 5.5, units = 'in')
pm
View(scattermat)
chosen=uniform_cLHS$SOW
hist(chosen, main="Driest8yrAVG: un. cLHS")
###### Plotting just one SOW set
chosen=KenStoneSOW
###### Plotting just one SOW set
chosen=KenStoneSOW
hist(chosen, main="Driest8yrAVG: Kennard Stone")
hist(chosen, main="Driest8yrAVG: Kennard Stone", xlab = "MAF")
chosen=uniform_cLHS$SOW
hist(chosen, main="Driest8yrAVG: un. cLHS", xlab = "MAF")
###### Plotting just one SOW set
chosen=KenStoneSOW
hist(chosen, main="Driest8yrAVG: Kennard Stone", xlab = "MAF")
setwd('G:/My Drive/CU Boulder/Phase 4 Scenario Discovery/R/Interactive dashboards/CRB-Scenario-Discovery-App')
filename='ScenarioDiscoveryWebapp.Rmd'
# make errors print in r console
# options(shiny.error=browser)
# stop errors from printing in r console
# options(shiny.error=NULL)
# render to your Viewer. From viewer, can publish to a server like shinyapps.io or open in browser
# rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0"))
# launch app to your web browser
rmarkdown::run(filename, shiny_args = list(port = 3838, host = "0.0.0.0", launch.browser=TRUE))
